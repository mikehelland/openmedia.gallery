<!DOCTYPE html>
<html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    <style>
        html {
            height: 100%;
            padding: 0px;
            margin: 0px;
        }

        body {
            height: 100%;
            padding: 0px;
            margin: 0px;
            /*background: rgba(0, 0, 0, 0) linear-gradient(135deg, rgb(249, 241, 232) 0%, rgb(205, 214, 227) 100%) repeat scroll 0% 0%;*/
            background: rgba(0, 0, 0, 0) linear-gradient(135deg,
                    rgb(90, 87, 83) 0%, rgb(50, 53, 56) 100%) repeat scroll 0% 0%;
            color: white;
            font-family: Arial, Helvetica, sans-serif;

        }

        .user {
            position: relative;
            display: inline-block;
            box-sizing: border-box;
        }

        .user video {
            width: 100%;
        }

        @media all and (orientation:landscape) {
            .user {
                width: 33%;
            }

        }

        @media all and (orientation:portrait) {
            .user {
                width: 50%;
            }
        }

        #join-area {
            margin: auto;
            font-size: 30px;
            width: 60%;
            left: 25%;
        }

        #user-name-input,
        #join-button {
            font-size: 30px;
            width: 100%;
            box-sizing: border-box;
        }

        #activity-log {
            font-size: 12px;
            font-family: 'Courier New', Courier, monospace;
            display: none;
        }

        #disconnect-button {
            display: none;
            margin: auto;
            margin-bottom: 12px;
        }


        .user-name {
            position: absolute;
            background-color: #202020;
            color: #c0c0c0;
        }


        #join-area li {
            font-size: 16px;
            margin-bottom: 8px;
        }

        #apple-tip {
            visibility: hidden;
        }
    </style>
</head>

<body>
    <div id="main-body">
        <div id="join-area">
            <div>Name:</div>
            <p><input id="user-name-input"></p>
            <button id="join-button">Join</button>
            <p>Tips:</p>
            <ul>
                <li>Your face should be above-center</li>
                <li>FireFox and Chrome work best</li>
                <li id="apple-tip">Touch the Play button if a video doesn't auto-start</li>
            </ul>
        </div>



        <!--<select>
            <option>Drums</option>
            <option>Keyboard</option>
        </select>-->
        <button id="disconnect-button">Disconnect</button>

        <div id="user-list">
            <div id="you" class="user"></div>
        </div>

        <div id="activity-log"></div>

        <script src="/socket.io/socket.io.js"></script>
        <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
        <script src="/js/omgrtc.js"></script>
        <script>

            var userNameInput = document.getElementById("user-name-input")
            var userName = window.location.search.slice(1)
            var roomName = "studio"
            if (userName.indexOf(":") > -1) {
                roomName = userName.split(":")[0]
                userName = userName.split(":")[1]
            }

            userNameInput.value = userName

            var userListEl = document.getElementById('user-list')

            var rt = new OMGRealTime("https://openmedia.gallery/")
            rt.acceptAllCalls = true

            var activityLog = document.getElementById("activity-log")
            var log = text => {
                console.log(text)
                activityLog.innerHTML = text + "<br>" + activityLog.innerHTML
                //activityLog.innerHTML += text + "<br>"
            }

            rt.onlog = (text) => {
                //log(text)
            }

            var you = document.getElementById("you")
            var joinButton = document.getElementById("join-button")
            var joinArea = document.getElementById("join-area")
            joinButton.onclick = () => {
                userName = userNameInput.value || (Math.round(Math.random() * 100000) + "")

                //document.getElementById("your-name").innerHTML = userName

                rt.getUserMedia(video => {
                    you.appendChild(video)
                    rt.join(roomName, userName)
                })
                joinArea.style.display = "none"
                disconnectButton.style.display = "inline-block"
            }

            var disconnectButton = document.getElementById("disconnect-button")
            disconnectButton.onclick = () => {
                //rt.closeConnections()
                //rt.stopMedia()
                rt.leave()
                setTimeout(() => { window.location = window.location }, 250)
            }


            rt.onjoined = (users) => {
                console.log("onjoined!!!!!!")
                disconnectButton.innerHTML = "Disconnect"
                for (var user in users) {
                    if (!users[user].peerConnection) {
                        rt.callUser(user)
                    }
                    else {
                        userListEl.appendChild(user.div)
                    }
                }
            }


            rt.onnewuser = (name, user) => {
                log(name + " joined")
                userEl = document.createElement("div")
                userEl.className = "user"
                nameEl = document.createElement("div")
                nameEl.className = "user-name"
                nameEl.innerHTML = name
                videoEl = user.video
                userEl.appendChild(nameEl)
                userEl.appendChild(videoEl)
                userListEl.appendChild(userEl)
                user.div = userEl
            }

            rt.onuserleft = (name, user) => {
                log(name + " left")
                userListEl.removeChild(user.div)
            }

            rt.onuservideodisconnected = (name, user) => {
                userListEl.removeChild(user.div)
            }
            rt.onuserdisconnected = (name, user) => {
                if (user.disconnected && user.peerConnection.connectionState !== "connected") {
                    //user.div.style.display = "none"
                }
            }
            rt.onuserreconnected = (name, user) => {
                user.div.style.display = "inline-block"
                userListEl.appendChild(user.div)
                user.video.play()
            }

            rt.ondisconnect = () => {
                //connectedStatusEl.innerHTML = "not connected"
                console.log("disconnected")
                disconnectButton.innerHTML = "Disconnect."
                //disconnectButton.style.display = "none"
                //joinArea.style.display = "block"
            };

            /*var fullscreen = false
            document.getElementById("fullscreen-button").onclick = (e) => {
                if (fullscreen) {
                    document.exitFullscreen();
                }
                else {
                    document.body.requestFullscreen();
                }
                fullscreen = !fullscreen
            }*/


            /*for (var user in rt.remoteUsers) {
                userListEl.appendChild(rt.remoteUsers[user].div)
            }*/

            rt.oncommand = (data) => {
                if (data.command === "setStandardView") setStandardView()
                else if (data.command === "setBrowserView") setBrowserView()
                else if (data.command === "setGameShowView") setGameShowView()
                else if (data.command === "setWhiteboardView") setWhiteboardView()
                else if (data.command.navigateBrowserTo) {
                    browser.iframe.src = data.command.navigateBrowserTo
                    browser.input.value = data.command.navigateBrowserTo
                }
            }


            if (navigator.userAgent.indexOf("iPhone") > -1 ||
                navigator.userAgent.indexOf("iPad") > -1 ||
                navigator.userAgent.indexOf("Mac OS X") > -1) {
                document.getElementById("apple-tip").style.visibility = "visible"
            }
        </script>
        <script src="https://openmusic.gallery/omg.js"></script>
        <script>

            var tg = {}

            tg.turnOnMIDI = function () {
                if (navigator.requestMIDIAccess && !omg.midi.api) {
                    navigator.requestMIDIAccess().then(omg.midi.onSuccess, omg.midi.onFailure);
                }
                if (!tg.midiParts) {
                    tg.midiParts = [];
                    omg.midi.onnoteoff = tg.onmidinoteoff;
                    omg.midi.onnoteon = tg.onmidinoteon;
                    omg.midi.onmessage = tg.onmidimessage;
                    omg.midi.onplay = tg.onmidiplay;
                    omg.midi.onstop = tg.onmidistop;
                }
            }

            tg.onmidinoteoff = function (noteNumber, channel) {
                tg.midiParts.forEach(part => {
                    if (!(part.midiChannel === channel || part.midiChannel === "All")) {
                        return;
                    }
                    if (part.data.surface.url === "PRESET_SEQUENCER") {
                        return
                    }
                    for (var i = 0; i < part.activeMIDINotes.length; i++) {
                        if (part.activeMIDINotes[i].scaledNote === noteNumber) {
                            part.activeMIDINotes.splice(i, 1);
                            break;
                        }
                    }
                    if (part.activeMIDINotes.length === 0) {
                        tg.player.endLiveNotes(part);
                    }
                    else if (i === 0 ||
                        (tg.player.playing && part.activeMIDINotes.autobeat > 0)) {
                        tg.player.playLiveNotes(part.activeMIDINotes, part, 0);
                    }
                    sendNoteOff(noteNumber, part)
                });
            };

            tg.onmidinoteon = function (noteNumber, velocity, channel) {

                tg.midiParts.forEach(part => {
                    if (!(part.midiChannel === channel || part.midiChannel === "All")) {
                        return;
                    }
                    var note = { beats: 0.25, scaledNote: noteNumber };
                    part.activeMIDINotes.splice(0, 0, note);
                    if (!part.data.soundSet.chromatic) {
                        note.note = noteNumber % part.soundSet.data.length;
                    }
                    else {
                        note.note = 1
                        //todo this looks horribly inneficient
                        /*for (var i = 0; i < part.mm.frets.length; i++) {
                            if (part.mm.frets[i].note === noteNumber) {
                                note.note = i - part.mm.frets.rootNote;
                                break;
                            }
                            if (part.mm.frets[i].note > noteNumber) {
                                note.note = i - part.mm.frets.rootNote - 0.5;
                                break;
                            }
                        }*/
                    }
                    

                    if (part.data.surface.url === "PRESET_SEQUENCER") {
                        tg.player.playSound(part.data.tracks[note.note].sound, part,
                            part.data.tracks[note.note].audioParams, velocity / 120)

                        sendPlaySound(note.note, velocity / 120, part)
                    }
                    else {
                        tg.player.playLiveNotes(part.activeMIDINotes, part, 0);
                        sendPlayNote(note, velocity / 120, part)
                    }

                });
            };

            tg.onmidiplay = function () {
                if (!tg.player.playing) {
                    tg.player.play();
                }
            };

            tg.onmidistop = function () {
                if (tg.player.playing) {
                    tg.player.stop();
                }
            };

            tg.onmidimessage = function (control, value, channel) {
                if (control === 91) {
                    value = Math.floor(value / 128 * 4);
                    if (value === 1) value = 4;
                    else if (value === 3) value = 1;
                    tg.midiParts.forEach(part => {
                        if (!(part.midiChannel === channel || part.midiChannel === "All")) {
                            return;
                        }
                        part.activeMIDINotes.autobeat = value;
                    });
                }
                else if (control === 7) {
                    tg.midiParts.forEach(part => {
                        if (!(part.midiChannel === channel || part.midiChannel === "All")) {
                            return;
                        }
                        part.data.audioParams.gain = 1.5 * Math.pow(value / 127, 2);
                        part.gain.gain.value = part.data.audioParams.gain;
                        tg.song.partMuteChanged(part);
                    });
                }
                else if (control === 10) {
                    tg.midiParts.forEach(part => {
                        if (!(part.midiChannel === channel || part.midiChannel === "All")) {
                            return;
                        }
                        part.data.audioParams.pan = (value - 64) / 64;
                        part.panner.pan.value = part.data.audioParams.pan;
                        tg.song.partMuteChanged(part);
                    });
                }
                else if (control === "pitchbend" || control === 5) {
                    if (value === 64) {
                        value = 1;
                    }
                    else if (value < 64) {
                        value = value / 64 / 2 + 0.5;
                    }
                    else {
                        value = 1 + (value - 64) / 63;
                    }
                    tg.midiParts.forEach(part => {
                        if (!(part.midiChannel === channel || part.midiChannel === "All")) {
                            return;
                        }
                        part.data.audioParams.warp = value;
                        //part.panner.warp.value = part.data.audioParams.warp;
                        if (part.osc) {
                            part.osc.frequency.value = part.baseFrequency * value;
                        }
                        tg.song.partMuteChanged(part);
                    });
                }
                else if (control === 71) {
                    tg.song.gain = value / 127 * 1.5;
                    tg.song.postFXGain.gain.value = tg.song.gain;
                }
                else if (control === 74) {
                    tg.song.data.beatParams.bpm = Math.round(value / 127 * 200 + 20);
                    tg.song.beatsChanged();
                }
            };

            var midiPart
            var selectMIDIPart = partI => {
                if (midiPart) {
                    midiPart.midiChannel = "Off"
                }
                var part = music.song.sections[0].parts[partI]
                part.activeMIDINotes = [];
                part.midiChannel = "All"
                part.activeMIDINotes.autobeat = 0;
                tg.midiParts = [part];
                midiPart = part
            }

            var music = new OMusicPlayer()
            music.loadFullSoundSets = true
            music.prepareSongFromURL("https://openmusic.gallery/data/1655", () => {
                tg.song = music.song
                tg.player = music
                tg.turnOnMIDI()
                selectMIDIPart(1)
            })

            var sendPlaySound = (note, velocity, part) => {
                rt.sendCommandToRoom({action: "playsound", note: note, velocity: velocity, partI: part.position})         
            }
            var sendPlayNote = (note, velocity, part) => {
                rt.sendCommandToRoom({action: "playnote", note: note.scaledNote, velocity: velocity, partI: part.position})
            }
            var sendNoteOff = (note, part) => {
                rt.sendCommandToRoom({action: "noteoff", note: note, partI: part.position})
            }

            rt.oncommand = (data) => {
                if (data.command.action === "playsound") {
                    var part = tg.player.song.sections[0].parts[data.command.partI]
                    tg.player.playSound(part.data.tracks[data.command.note].sound, 
                            part,
                            part.data.tracks[data.command.note].audioParams, data.command.velocity)
                }
                else if (data.command.action === "playnote") {
                    var note = { beats: 0.25, scaledNote: data.command.note };
                    var part = tg.player.song.sections[0].parts[data.command.partI]
                    part.activeMIDINotes.splice(0, 0, note);
                    tg.player.playLiveNotes(part.activeMIDINotes, part, 0);
                }
                else if (data.command.action === "noteoff") {
                    var part = tg.player.song.sections[0].parts[data.command.partI]
                    for (var i = 0; i < part.activeMIDINotes.length; i++) {
                        if (part.activeMIDINotes[i].scaledNote === data.command.note) {
                            part.activeMIDINotes.splice(i, 1);
                            break;
                        }
                    }
                    if (part.activeMIDINotes.length === 0) {
                        tg.player.endLiveNotes(part);
                    }
                    else if (i === 0 ||
                        (tg.player.playing && part.activeMIDINotes.autobeat > 0)) {
                        tg.player.playLiveNotes(part.activeMIDINotes, part, 0);
                    }             
                }
            }
        </script>
</body>

</html>